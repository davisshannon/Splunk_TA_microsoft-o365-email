import ta_microsoft_o365_email_add_on_for_splunk_declare

import os
import sys
import time
import datetime
import json

import modinput_wrapper.base_modinput
from solnlib.packages.splunklib import modularinput as smi



import input_module_o365_email as input_module

bin_dir = os.path.basename(__file__)

'''
    Do not edit this file!!!
    This file is generated by Add-on builder automatically.
    Add your modular input logic to file input_module_o365_email.py
'''
class ModInputo365_email(modinput_wrapper.base_modinput.BaseModInput):

    def __init__(self):
        if 'use_single_instance_mode' in dir(input_module):
            use_single_instance = input_module.use_single_instance_mode()
        else:
            use_single_instance = False
        super(ModInputo365_email, self).__init__("ta_microsoft_o365_email_add_on_for_splunk", "o365_email", use_single_instance)
        self.global_checkbox_fields = None

    def get_scheme(self):
        """overloaded splunklib modularinput method"""
        scheme = super(ModInputo365_email, self).get_scheme()
        scheme.title = ("O365 Email")
        scheme.description = ("Go to the add-on\'s configuration UI and configure modular inputs under the Inputs menu.")
        scheme.use_external_validation = True
        scheme.streaming_mode_xml = True

        scheme.add_argument(smi.Argument("name", title="Name",
                                         description="",
                                         required_on_create=True))

        """
        For customized inputs, hard code the arguments here to hide argument detail from users.
        For other input types, arguments should be get from input_module. Defining new input types could be easier.
        """
        scheme.add_argument(smi.Argument("audit_email_account", title="Audit Email Account",
                                         description="Please enter the audit email configured in the O365 mail flow rule",
                                         required_on_create=True,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("inbox_id", title="Inbox ID",
                                         description="Go to https://developer.microsoft.com/en-us/graph/graph-explorer, log in as the audit email account, and run https://graph.microsoft.com/v1.0/me/mailFolders.  Copy the id value for the Inbox folder.",
                                         required_on_create=True,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("tenant", title="Tenant ID",
                                         description="Please enter the Tenant ID from the Azure App registration process",
                                         required_on_create=True,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("endpoint", title="Endpoint",
                                         description="",
                                         required_on_create=True,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("get_attachment_info", title="Get Attachment Info",
                                         description="Gathers basic attachment info (name, type, size, hash, etc).",
                                         required_on_create=False,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("read_zip_files", title="Read Zip Files",
                                         description="Attempts to read file names and file hashes from within zip files.  Requires Get Attachment Info to be selected.",
                                         required_on_create=False,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("file_hash_algorithm", title="File Hash Algorithm",
                                         description="Used for attachment and zip file hashing.",
                                         required_on_create=False,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("extract_iocs", title="Extract IOCs",
                                         description="Attempts to extract IOCs from supported attachment types (currently HTML, PDF, XML, CSV) and email bodies.  (URLs, domains, ipv4, ipv6, hashes, etc).",
                                         required_on_create=False,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("macro_analysis", title="Macro Analysis",
                                         description="Detects and analyses macros within Office document formats.",
                                         required_on_create=False,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("attachment_data_ingest", title="Attachment Data Ingest",
                                         description="Will attempt to ingest the actual data from the attachment.  WARNING- POTENTIALLY LARGE INGEST IF ENABLED.  Can also take more time if the files are large.",
                                         required_on_create=False,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("get_body", title="Get Body",
                                         description="Retrieves the whole message body for emails and any emails that are attached.WARNING- POTENTIALLY LARGE INGEST IF ENABLED",
                                         required_on_create=False,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("get_body_preview", title="Get Body Preview",
                                         description="Only retrieves the first 255 characters in the email body",
                                         required_on_create=False,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("get_message_path", title="Get Message Path",
                                         description="Gathers all MTA hops the message traversed",
                                         required_on_create=False,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("get_internet_headers", title="Get Internet Headers",
                                         description="Retrieves All Internet Headers",
                                         required_on_create=False,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("get_auth_results", title="Get Auth Results",
                                         description="Gathers authentication results headers",
                                         required_on_create=False,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("get_spf_results", title="Get SPF Results",
                                         description="Gathers SPF results from the headers",
                                         required_on_create=False,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("get_dkim_signature", title="Get DKIM Signature",
                                         description="Gathers DKIM signature results from the headers",
                                         required_on_create=False,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("get_x_headers", title="Get X Headers",
                                         description="Gathers all X-Headers from the headers",
                                         required_on_create=False,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("global_account", title="Global Account",
                                         description="",
                                         required_on_create=True,
                                         required_on_edit=False))
        return scheme

    def get_app_name(self):
        return "TA_microsoft_o365_email_add_on_for_splunk"

    def validate_input(self, definition):
        """validate the input stanza"""
        input_module.validate_input(self, definition)

    def collect_events(self, ew):
        """write out the events"""
        input_module.collect_events(self, ew)

    def get_account_fields(self):
        account_fields = []
        account_fields.append("global_account")
        return account_fields

    def get_checkbox_fields(self):
        checkbox_fields = []
        checkbox_fields.append("get_attachment_info")
        checkbox_fields.append("read_zip_files")
        checkbox_fields.append("extract_iocs")
        checkbox_fields.append("macro_analysis")
        checkbox_fields.append("get_body")
        checkbox_fields.append("get_body_preview")
        checkbox_fields.append("get_message_path")
        checkbox_fields.append("get_internet_headers")
        checkbox_fields.append("get_auth_results")
        checkbox_fields.append("get_spf_results")
        checkbox_fields.append("get_dkim_signature")
        checkbox_fields.append("get_x_headers")
        return checkbox_fields

    def get_global_checkbox_fields(self):
        if self.global_checkbox_fields is None:
            checkbox_name_file = os.path.join(bin_dir, 'global_checkbox_param.json')
            try:
                if os.path.isfile(checkbox_name_file):
                    with open(checkbox_name_file, 'r') as fp:
                        self.global_checkbox_fields = json.load(fp)
                else:
                    self.global_checkbox_fields = []
            except Exception as e:
                self.log_error('Get exception when loading global checkbox parameter names. ' + str(e))
                self.global_checkbox_fields = []
        return self.global_checkbox_fields

if __name__ == "__main__":
    exitcode = ModInputo365_email().run(sys.argv)
    sys.exit(exitcode)
